
import java.awt.Color;
import java.awt.Graphics;
import schema.AND;
import schema.Elementas;
import schema.Ivestis;
import schema.NOT;
import schema.OR;
import schema.Schema;
import schema.XOR;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Adomas
 */
public class Piesinys extends javax.swing.JPanel {
    Schema schema;
    int zoom = 30;
    int zingsnis = 0;
    int keturkampioPradziaX,keturkampioPradziaY;
    int keturkampioPabaigaX,keturkampioPabaigaY;
    Color spalva=Color.BLACK;

    public void setSpalva(Color spalva) {
        this.spalva = Color.MAGENTA;
    }
    
    
    
    public int getKeturkampioPradziaX() {
        return keturkampioPradziaX;
    }

    public void setKeturkampioPradziaX(int keturkampioPradziaX) {
        this.keturkampioPradziaX = keturkampioPradziaX;
    }

    public int getKeturkampioPradziaY() {
        return keturkampioPradziaY;
    }

    public void setKeturkampioPradziaY(int keturkampioPradziaY) {
        this.keturkampioPradziaY = keturkampioPradziaY;
    }

    public int getKeturkampioPabaigaX() {
        return keturkampioPabaigaX;
    }

    public void setKeturkampioPabaigaX(int keturkampioPabaigaX) {
        this.keturkampioPabaigaX = keturkampioPabaigaX;
    }

    public int getKeturkampioPabaigaY() {
        return keturkampioPabaigaY;
    }

    /**
     * Creates new form Piesinys
     */
    public void setKeturkampioPabaigaY(int keturkampioPabaigaY) {
        this.keturkampioPabaigaY = keturkampioPabaigaY;
    }

    public void setZingsnis(int zingsnis) {
        this.zingsnis = zingsnis;
    }

    public Piesinys() {
        initComponents();
    }

    public int getZoom() {
        return zoom;
    }

    public void setZoom(int zoom) {
        this.zoom = zoom;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        int linijuSkaicius=0;
        g.drawRect(keturkampioPradziaX, keturkampioPradziaY, keturkampioPabaigaX, keturkampioPabaigaY);
        g.drawString(zingsnis+"", this.getWidth()-30, 20);
        if(schema == null){
        g.drawString("Pirmiausia sukurkite schema", 10, 20);
        }else{
           // g.drawString("Schemoje yra "+schema.kiekElementu(), 30, 50);
            
           
           
           
            for(Elementas e:schema.getElementai()){
               
                if(zingsnis==0){
                g.setColor(Color.BLACK);
                if(e.getClass().equals(NOT.class)){
                g.drawLine(e.getX(), e.getY(), e.getX(), e.getY()+zoom);
                g.drawLine(e.getX(), e.getY(), e.getX()+zoom-zoom/5, e.getY()+zoom/2);
                g.drawLine(e.getX(), e.getY()+zoom, e.getX()+zoom-zoom/5, e.getY()+zoom/2);
                g.drawOval(e.getX()+zoom-zoom/5, e.getY()+zoom/2-zoom/10, zoom/5, zoom/5);
                }
                if(e.getClass().equals(Ivestis.class)){
                    g.drawRect(e.getX(), e.getY(), zoom, zoom);
                    g.drawString(e.gautiReiksme()+"", e.getX()+1, e.getY()+zoom*2/3);
                }
                if(e.getClass().equals(AND.class)){
                g.drawRect(e.getX(), e.getY(), zoom, zoom);
                g.drawString("AND", e.getX()+1, e.getY()+zoom*2/3);
                }
                if(e.getClass().equals(OR.class)){
                g.drawRect(e.getX(), e.getY(), zoom, zoom);
                g.drawString("OR", e.getX()+1, e.getY()+zoom*2/3);
                }
                if(e.getClass().equals(XOR.class)){
                g.drawRect(e.getX(), e.getY(), zoom, zoom);
                g.drawString("XOR", e.getX()+1, e.getY()+zoom*2/3);
                }
                
              for(Elementas in:e.ivestys) {
              g.drawLine(e.getX(), e.getY()+zoom/2, in.getX()+zoom, in.getY()+zoom/2);
              
              } 
               
            }
                
                
              
               
                g.setColor(Color.BLACK);
                if(e.getClass().equals(NOT.class)){
                g.drawLine(e.getX(), e.getY(), e.getX(), e.getY()+zoom);
                g.drawLine(e.getX(), e.getY(), e.getX()+zoom-zoom/5, e.getY()+zoom/2);
                g.drawLine(e.getX(), e.getY()+zoom, e.getX()+zoom-zoom/5, e.getY()+zoom/2);
                g.drawOval(e.getX()+zoom-zoom/5, e.getY()+zoom/2-zoom/10, zoom/5, zoom/5);
                }
                if(e.getClass().equals(Ivestis.class)){
                    g.drawRect(e.getX(), e.getY(), zoom, zoom);
                    g.drawString(e.gautiReiksme()+"", e.getX()+1, e.getY()+zoom*2/3);
                }
                if(e.getClass().equals(AND.class)){
                g.drawRect(e.getX(), e.getY(), zoom, zoom);
                g.drawString("AND", e.getX()+1, e.getY()+zoom*2/3);
                }
                if(e.getClass().equals(OR.class)){
                g.drawRect(e.getX(), e.getY(), zoom, zoom);
                g.drawString("OR", e.getX()+1, e.getY()+zoom*2/3);
                }
                if(e.getClass().equals(XOR.class)){
                g.drawRect(e.getX(), e.getY(), zoom, zoom);
                g.drawString("XOR", e.getX()+1, e.getY()+zoom*2/3);
                }
       
              for(Elementas in:e.ivestys) {
                  if(linijuSkaicius<zingsnis){
              g.setColor(Color.BLUE);}
              g.drawLine(e.getX(), e.getY()+zoom/2, in.getX()+zoom, in.getY()+zoom/2);
              linijuSkaicius++;
              g.setColor(Color.BLACK);
              
              } 
                
                
                
            }
        }
        }
    
    

    public void setSchema(Schema s){
        schema = s;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
